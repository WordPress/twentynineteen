# Travis CI configuration file.
# @link https://travis-ci.org/

# For use with the Twenty Nineteen WordPress theme
# @link https://github.com/WordPress/twentynineteen/

# Declare project language and PHP versions to test against.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

# Newer versions like trusty don't have PHP 5.2 or 5.3
# https://blog.travis-ci.com/2017-07-11-trusty-as-default-linux-is-coming
dist: trusty

# Cache content for faster build process.
# https://docs.travis-ci.com/user/caching/
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

# PHP versions to build on
php:
  - 7.3
  - 7.2
  - 7.1
  - 7.0
  - 5.6
  - 5.5
  - 5.4

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
  global:
    # Current version in development is 5.0.
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=5.0
    - WP_MULTISITE=0
    - LINT=1

# Declare versions of PHP to use. Use one decimal max.
matrix:
  fast_finish: true
  include:
    - php: "5.3"
      env: LINT=0
      dist: precise
    # Current minimum $required_php_version for WordPress: 5.2.4
    - php: "5.2"
      env: LINT=0
      dist: precise

before_install:
  # Speed up build time by disabling Xdebug.
  # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
  # https://twitter.com/kelunik/status/954242454676475904
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  - echo $WP_VERSION
  - echo $WP_MULTISITE
  # Set up WordPress installation.
  - theme_slug=$(basename $(pwd))
  - theme_dir=$(pwd)
  - echo $theme_slug
  - echo $theme_dir
  # Install WPThemeReview stnadards, which will install PHP_CodeSniffer, WordPress Coding Standards, WPThemeReview and PHPCompatibility standards.
  - if [[ "$LINT" == "1" ]]; then composer install --no-suggest; fi
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash;
  # Install JSHint, a JavaScript Code Quality Tool
  # @link http://jshint.com/docs/
  - if [[ "$LINT" == "1" ]]; then npm install -g jshint; fi
  - if [[ "$LINT" == "1" ]]; then wget https://develop.svn.wordpress.org/trunk/.jshintrc; fi


# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Search theme for PHP syntax errors.
  # The usage of bash + || exit 1 is to ensure xargs does not exit on first error.
  - find . \( -name '*.php' \) -not -path "./vendor/*" | xargs -n1 bash -c 'php -lf $0 || exit 1'
  # Run the theme through JSHint
  - if [[ "$LINT" == "1" ]]; then jshint --exclude ./vendor .; fi
  # WordPress Coding Standards
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # -p flag: Show progress of the run.
  # -s flag: Show sniff codes in all reports.
  # -v flag: Print verbose output.
  # -n flag: Do not print warnings (shortcut for --warning-severity=0)
  # --extensions: Only sniff PHP files.
  - if [[ "$LINT" == "1" ]]; then composer lint . -- -p -s -v -n --extensions=php; fi
